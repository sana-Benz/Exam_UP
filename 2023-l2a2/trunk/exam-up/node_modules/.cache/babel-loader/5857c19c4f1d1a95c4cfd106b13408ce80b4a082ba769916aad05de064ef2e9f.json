{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanab\\\\OneDrive\\\\Bureau\\\\PROJECT\\\\2023-l2a2\\\\trunk\\\\exam-up\\\\src\\\\assests\\\\components\\\\OptRepList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../Pages/style/OptRepList.css\";\nimport Form from 'react-bootstrap/Form';\n\n//ce composant est utilisé pour l'examen que l'examiné va passer\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OptRepList = ({\n  id_question,\n  type_question,\n  idReponsesCallback\n}) => {\n  _s();\n  // liste de réponses possibles pour une question\n  const [ArrayReponses, setArrayReponses] = useState([]);\n\n  // liste des ids des réponses de l'examine\n  const [idReponses, setIdReponses] = useState([]);\n\n  //fonction qui va chercher la liste des opt de rép de la bdd à partir de l'id de la question\n  useEffect(() => {\n    const getOptRep = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/reponses_possibles/${id_question}`);\n        const jasonData = await response.json();\n        if (Array.isArray(jasonData)) {\n          setArrayReponses(jasonData);\n        } else {\n          console.error(\"Pas de réponse de l'API\");\n        }\n      } catch (err) {\n        console.error(err.message);\n      }\n    };\n    getOptRep();\n  }, [id_question]);\n  const handleExamineAnswers = answerId => {\n    if (type_question === 'QCM') {\n      if (idReponses.includes(answerId)) {\n        // Si la réponse est déjà sélectionnée, la retirer\n        setIdReponses(prevIdReponses => prevIdReponses.filter(id => id !== answerId));\n      } else {\n        // Sinon, l'ajouter à la liste des réponses\n        setIdReponses(prevIdReponses => [...prevIdReponses, answerId]);\n      }\n    } else {\n      setIdReponses([answerId]);\n    }\n    idReponsesCallback(prevIdReponses => {\n      if (type_question === 'QCM') {\n        if (prevIdReponses.includes(answerId)) {\n          return prevIdReponses.filter(id => id !== answerId);\n        } else {\n          return [...prevIdReponses, answerId];\n        }\n      } else {\n        return [answerId];\n      }\n    });\n    console.log('Voici les id des réponses cochées :', idReponses);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Big_Container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"consigne\",\n      children: \"Veuillez choisir la ou les r\\xE9ponse(s) correcte(s) :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Smaller_Container\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: ArrayReponses.map(reponse => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"response_container\",\n          children: type_question === 'QCM' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: reponse.id,\n              value: reponse.texte,\n              className: \"reponse\",\n              onChange: () => handleExamineAnswers(reponse.id),\n              checked: idReponses.includes(reponse.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: reponse.id,\n              children: reponse.texte\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: reponse.id,\n              name: \"reponse\",\n              value: reponse.texte,\n              className: \"reponse\",\n              onChange: () => handleExamineAnswers(reponse.id),\n              checked: idReponses.includes(reponse.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: reponse.id,\n              children: reponse.texte\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)\n        }, reponse.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(OptRepList, \"cZiwq77fR6dK2GBuQoyLL0qo99g=\");\n_c = OptRepList;\nexport default OptRepList;\nvar _c;\n$RefreshReg$(_c, \"OptRepList\");","map":{"version":3,"names":["React","useState","useEffect","Form","jsxDEV","_jsxDEV","OptRepList","id_question","type_question","idReponsesCallback","_s","ArrayReponses","setArrayReponses","idReponses","setIdReponses","getOptRep","response","fetch","jasonData","json","Array","isArray","console","error","err","message","handleExamineAnswers","answerId","includes","prevIdReponses","filter","id","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","reponse","type","value","texte","onChange","checked","htmlFor","name","_c","$RefreshReg$"],"sources":["C:/Users/sanab/OneDrive/Bureau/PROJECT/2023-l2a2/trunk/exam-up/src/assests/components/OptRepList.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../Pages/style/OptRepList.css\";\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n//ce composant est utilisé pour l'examen que l'examiné va passer\r\nconst OptRepList = ({id_question , type_question , idReponsesCallback}) => {\r\n  // liste de réponses possibles pour une question\r\n  const [ArrayReponses, setArrayReponses] = useState([]);\r\n\r\n  // liste des ids des réponses de l'examine\r\n  const [idReponses, setIdReponses] = useState([]);\r\n\r\n  //fonction qui va chercher la liste des opt de rép de la bdd à partir de l'id de la question\r\n  useEffect(() => {\r\n    const getOptRep = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:3001/reponses_possibles/${id_question}`);\r\n        const jasonData = await response.json(); \r\n        if (Array.isArray(jasonData)) {\r\n          setArrayReponses(jasonData);\r\n        } else {\r\n          console.error(\"Pas de réponse de l'API\");\r\n        }\r\n      } catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    };\r\n  \r\n    getOptRep(); \r\n  }, [id_question]);\r\n\r\n  const handleExamineAnswers = (answerId) => {\r\n    if (type_question === 'QCM') {\r\n      if (idReponses.includes(answerId)) {\r\n        // Si la réponse est déjà sélectionnée, la retirer\r\n        setIdReponses(prevIdReponses => prevIdReponses.filter(id => id !== answerId));\r\n      } else {\r\n        // Sinon, l'ajouter à la liste des réponses\r\n        setIdReponses(prevIdReponses => [...prevIdReponses, answerId]);\r\n      }\r\n    } else {\r\n      setIdReponses([answerId]);\r\n    }\r\n  \r\n    \r\n    idReponsesCallback(prevIdReponses => {\r\n      if (type_question === 'QCM') {\r\n        if (prevIdReponses.includes(answerId)) {\r\n          return prevIdReponses.filter(id => id !== answerId);\r\n        } else {\r\n          return [...prevIdReponses, answerId];\r\n        }\r\n      } else {\r\n        return [answerId];\r\n      }\r\n    });\r\n  \r\n    console.log('Voici les id des réponses cochées :', idReponses);\r\n  };\r\n    \r\n  \r\n\r\n  return (\r\n    <div className=\"Big_Container\">\r\n      <p className=\"consigne\">Veuillez choisir la ou les réponse(s) correcte(s) :</p>\r\n      <div className=\"Smaller_Container\">\r\n        <Form>\r\n          {ArrayReponses.map((reponse) => (\r\n            <div key={reponse.id} className=\"response_container\">\r\n              {type_question === 'QCM' ? (\r\n                <div>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id={reponse.id}\r\n                    value={reponse.texte}\r\n                    className=\"reponse\"\r\n                    onChange={() => handleExamineAnswers(reponse.id)}\r\n                    checked={idReponses.includes(reponse.id)}\r\n                  />\r\n                  <label htmlFor={reponse.id}>{reponse.texte}</label>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={reponse.id}\r\n                    name=\"reponse\"\r\n                    value={reponse.texte}\r\n                    className=\"reponse\"\r\n                    onChange={() => handleExamineAnswers(reponse.id)}\r\n                    checked={idReponses.includes(reponse.id)}\r\n                  />\r\n                  <label htmlFor={reponse.id}>{reponse.texte}</label>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OptRepList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}