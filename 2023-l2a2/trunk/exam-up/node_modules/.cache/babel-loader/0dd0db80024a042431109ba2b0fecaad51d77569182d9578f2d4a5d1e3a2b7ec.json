{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanab\\\\OneDrive\\\\Bureau\\\\PROJECT\\\\2023-l2a2\\\\trunk\\\\exam-up\\\\src\\\\assests\\\\components\\\\Examen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport QuestionExamen from \"./QuestionExamen\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Examen = ({\n  id_examen,\n  etat\n}) => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [arrayQuestionId, setArrayQuestionId] = useState([]);\n  const [allResponses, setAllResponses] = useState([]);\n  const [soumis, setSoumis] = useState(false);\n  useEffect(() => {\n    const storedResponses = localStorage.getItem(`idReponses_${id_examen}`);\n    if (storedResponses) {\n      setAllResponses(JSON.parse(storedResponses));\n    } else {\n      setAllResponses([]); // Set initial state to an empty array if no stored responses\n    }\n  }, [id_examen]);\n  useEffect(() => {\n    const getQuestionList = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/questions_examen/${id_examen}`);\n        const jsonData = await response.json();\n        setArrayQuestionId(jsonData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    };\n    getQuestionList();\n  }, [id_examen]);\n  const handleUpdateResponse = (questionId, responseId) => {\n    setAllResponses(prevResponses => {\n      const existingResponseIndex = prevResponses.findIndex(res => res.id_question === questionId);\n      if (existingResponseIndex !== -1) {\n        const updatedResponses = [...prevResponses];\n        updatedResponses[existingResponseIndex] = {\n          id_question: questionId,\n          id_option: [responseId]\n        };\n        return updatedResponses;\n      } else {\n        return [...prevResponses, {\n          id_question: questionId,\n          id_option: [responseId]\n        }];\n      }\n    });\n  };\n  useEffect(() => {\n    console.log(\"voici les réponses sélectionnées\", allResponses);\n  }, [allResponses]);\n  useEffect(() => {\n    localStorage.setItem(`idReponses_${id_examen}`, JSON.stringify(allResponses));\n  }, [allResponses, id_examen]);\n  const handleSubmit = async () => {\n    try {\n      const response = await fetch(`http://localhost:3001/Envoyer_reponses_examine/${id}/${id_examen}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(allResponses)\n      });\n      await response.json();\n      console.log(\"réponses envoyées à la base de données!\");\n      //localStorage.removeItem(`idReponses_${id_examen}`);\n      window.location.href = `/Profile_examine/${id}`;\n    } catch (error) {\n      console.error(\"Erreur:\", error);\n    }\n  };\n  useEffect(() => {\n    if (etat && !soumis) {\n      handleSubmit();\n      // Update submitted state\n      setSoumis(true);\n    }\n  }, [etat, soumis]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"flex-end\"\n    },\n    children: arrayQuestionId.map((questionId, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"10px\",\n        marginRight: \"10px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(QuestionExamen, {\n        id_question: questionId.id,\n        id_examen: id_examen,\n        indice: index,\n        etat: etat,\n        onUpdateResponse: handleUpdateResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(Examen, \"iruxDCelQXPd6fJquO6ZAY5BsGc=\", false, function () {\n  return [useParams];\n});\n_c = Examen;\nexport default _c2 = /*#__PURE__*/React.memo(Examen);\nvar _c, _c2;\n$RefreshReg$(_c, \"Examen\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","useEffect","QuestionExamen","useLocation","useParams","jsxDEV","_jsxDEV","Examen","id_examen","etat","_s","id","arrayQuestionId","setArrayQuestionId","allResponses","setAllResponses","soumis","setSoumis","storedResponses","localStorage","getItem","JSON","parse","getQuestionList","response","fetch","jsonData","json","err","console","error","message","handleUpdateResponse","questionId","responseId","prevResponses","existingResponseIndex","findIndex","res","id_question","updatedResponses","id_option","log","setItem","stringify","handleSubmit","method","headers","body","window","location","href","style","display","flexDirection","alignItems","children","map","index","marginTop","marginRight","indice","onUpdateResponse","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","memo","$RefreshReg$"],"sources":["C:/Users/sanab/OneDrive/Bureau/PROJECT/2023-l2a2/trunk/exam-up/src/assests/components/Examen.jsx"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport QuestionExamen from \"./QuestionExamen\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\n\r\nconst Examen = ({ id_examen, etat }) => {\r\n  const{id}= useParams();\r\n  const [arrayQuestionId, setArrayQuestionId] = useState([]);\r\n  const [allResponses, setAllResponses] = useState([]);\r\n  const [soumis, setSoumis]= useState(false);\r\n\r\n  useEffect(() => {\r\n    const storedResponses = localStorage.getItem(`idReponses_${id_examen}`);\r\n    if (storedResponses) {\r\n      setAllResponses(JSON.parse(storedResponses));\r\n    } else {\r\n      setAllResponses([]); // Set initial state to an empty array if no stored responses\r\n    }\r\n  }, [id_examen]);\r\n\r\n  useEffect(() => {\r\n    const getQuestionList = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:3001/questions_examen/${id_examen}`\r\n        );\r\n        const jsonData = await response.json();\r\n        setArrayQuestionId(jsonData);\r\n      } catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    };\r\n    getQuestionList();\r\n  }, [id_examen]);\r\n\r\n  const handleUpdateResponse = (questionId, responseId) => {\r\n    setAllResponses((prevResponses) => {\r\n      const existingResponseIndex = prevResponses.findIndex(res => res.id_question === questionId);\r\n      if (existingResponseIndex !== -1) {\r\n        const updatedResponses = [...prevResponses];\r\n        updatedResponses[existingResponseIndex] = { id_question: questionId, id_option: [responseId] };\r\n        return updatedResponses;\r\n      } else {\r\n        return [...prevResponses, { id_question: questionId, id_option: [responseId] }];\r\n      }\r\n    });\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n  console.log(\"voici les réponses sélectionnées\", allResponses);\r\n}, [allResponses]);\r\n\r\nuseEffect(() => {\r\n  localStorage.setItem(`idReponses_${id_examen}`, JSON.stringify(allResponses));\r\n}, [allResponses, id_examen]);\r\n\r\n  const handleSubmit = async () => {\r\n    \r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:3001/Envoyer_reponses_examine/${id}/${id_examen}`,\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(allResponses),\r\n          }\r\n        );\r\n        await response.json();\r\n        console.log(\"réponses envoyées à la base de données!\");\r\n        //localStorage.removeItem(`idReponses_${id_examen}`);\r\n        window.location.href = `/Profile_examine/${id}`;\r\n      } catch (error) {\r\n        console.error(\"Erreur:\", error);\r\n      }\r\n    \r\n  };\r\n\r\n  useEffect(() => {\r\n    if (etat && !soumis) {\r\n      handleSubmit();\r\n      // Update submitted state\r\n      setSoumis(true);\r\n    }\r\n  }, [etat, soumis]);\r\n\r\n  \r\n\r\n  return (\r\n    <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"flex-end\" }}>\r\n      {arrayQuestionId.map((questionId, index) => (\r\n        <div key={index} style={{ marginTop: \"10px\", marginRight: \"10px\" }}>\r\n          <QuestionExamen\r\n            id_question={questionId.id}\r\n            id_examen={id_examen}\r\n            indice={index}\r\n            etat={etat}\r\n            onUpdateResponse={handleUpdateResponse}\r\n\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Examen);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}