{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanab\\\\OneDrive\\\\Bureau\\\\PROJECT\\\\2023-l2a2\\\\trunk\\\\exam-up\\\\src\\\\assests\\\\components\\\\OptRepList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../Pages/style/OptRepList.css\";\nimport { useParams } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OptRepList = ({\n  id_question,\n  type_question,\n  onUpdateResponse,\n  allResponses\n}) => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [arrayReponses, setArrayReponses] = useState([]);\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  useEffect(() => {\n    var _allResponses$find;\n    // Initialize selectedOptions based on allResponses\n    const initialSelectedOptions = ((_allResponses$find = allResponses.find(response => response.id_question === id_question)) === null || _allResponses$find === void 0 ? void 0 : _allResponses$find.id_option) || [];\n    setSelectedOptions(initialSelectedOptions);\n  }, [allResponses, id_question]);\n  const handleUpdateResponse = responseId => {\n    if (type_question === 'QCU') {\n      // For QCU, replace the selected option\n      setSelectedOptions([responseId]);\n    } else {\n      // For QCM, toggle the selected option\n      setSelectedOptions(prevOptions => {\n        if (prevOptions.includes(responseId)) {\n          return prevOptions.filter(option => option !== responseId);\n        } else {\n          return [...prevOptions, responseId];\n        }\n      });\n    }\n  };\n  useEffect(() => {\n    // Pass selected options back to parent component\n    onUpdateResponse(id_question, selectedOptions);\n  }, [selectedOptions]);\n\n  // Function to fetch response options from the API based on question ID\n  useEffect(() => {\n    const getOptRep = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/reponses_possibles/${id_question}`);\n        const jasonData = await response.json();\n        if (Array.isArray(jasonData)) {\n          setArrayReponses(jasonData);\n        } else {\n          console.error(\"No response from the API\");\n        }\n      } catch (err) {\n        console.error(err.message);\n      }\n    };\n    getOptRep();\n  }, [id_question]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Big_Container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"consigne\",\n      children: \"Veuillez choisir la ou les r\\xE9ponse(s) correcte(s) :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Smaller_Container\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: arrayReponses.map(reponse => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"response_container\",\n          children: type_question === 'QCM' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: reponse.id,\n              value: reponse.texte,\n              className: \"reponse\",\n              onChange: () => handleUpdateResponse(reponse.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: reponse.id,\n              children: reponse.texte\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: reponse.id,\n              name: \"reponse\",\n              value: reponse.texte,\n              className: \"reponseA\",\n              onChange: () => handleUpdateResponse(reponse.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: reponse.id,\n              children: reponse.texte\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this)\n        }, reponse.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(OptRepList, \"g72Z6XOKH8taEeLwDtQhfrzR/Y8=\", false, function () {\n  return [useParams];\n});\n_c = OptRepList;\nexport default OptRepList;\nvar _c;\n$RefreshReg$(_c, \"OptRepList\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Form","jsxDEV","_jsxDEV","OptRepList","id_question","type_question","onUpdateResponse","allResponses","_s","id","arrayReponses","setArrayReponses","selectedOptions","setSelectedOptions","_allResponses$find","initialSelectedOptions","find","response","id_option","handleUpdateResponse","responseId","prevOptions","includes","filter","option","getOptRep","fetch","jasonData","json","Array","isArray","console","error","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","reponse","type","value","texte","onChange","htmlFor","name","_c","$RefreshReg$"],"sources":["C:/Users/sanab/OneDrive/Bureau/PROJECT/2023-l2a2/trunk/exam-up/src/assests/components/OptRepList.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../Pages/style/OptRepList.css\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nconst OptRepList = ({ id_question, type_question, onUpdateResponse , allResponses}) => {\r\n  const { id } = useParams();\r\n  const [arrayReponses, setArrayReponses] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Initialize selectedOptions based on allResponses\r\n    const initialSelectedOptions = allResponses.find(response => response.id_question === id_question)?.id_option || [];\r\n    setSelectedOptions(initialSelectedOptions);\r\n  }, [allResponses, id_question]);\r\n\r\n  const handleUpdateResponse = (responseId) => {\r\n    if (type_question === 'QCU') {\r\n      // For QCU, replace the selected option\r\n      setSelectedOptions([responseId]);\r\n    } else {\r\n      // For QCM, toggle the selected option\r\n      setSelectedOptions(prevOptions => {\r\n        if (prevOptions.includes(responseId)) {\r\n          return prevOptions.filter(option => option !== responseId);\r\n        } else {\r\n          return [...prevOptions, responseId];\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Pass selected options back to parent component\r\n    onUpdateResponse(id_question, selectedOptions);\r\n  }, [selectedOptions]);\r\n\r\n  // Function to fetch response options from the API based on question ID\r\n  useEffect(() => {\r\n    const getOptRep = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:3001/reponses_possibles/${id_question}`);\r\n        const jasonData = await response.json();\r\n        if (Array.isArray(jasonData)) {\r\n          setArrayReponses(jasonData);\r\n        } else {\r\n          console.error(\"No response from the API\");\r\n        }\r\n      } catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    };\r\n\r\n    getOptRep();\r\n  }, [id_question]);\r\n\r\n  return (\r\n    <div className=\"Big_Container\">\r\n      <p className=\"consigne\">Veuillez choisir la ou les r√©ponse(s) correcte(s) :</p>\r\n      <div className=\"Smaller_Container\">\r\n        <Form>\r\n          {arrayReponses.map((reponse) => (\r\n            <div key={reponse.id} className=\"response_container\">\r\n              {type_question === 'QCM' ? (\r\n                <div>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id={reponse.id}\r\n                    value={reponse.texte}\r\n                    className=\"reponse\"\r\n                    onChange={() => handleUpdateResponse(reponse.id)}\r\n                  />\r\n                  <label htmlFor={reponse.id}>{reponse.texte}</label>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={reponse.id}\r\n                    name=\"reponse\"\r\n                    value={reponse.texte}\r\n                    className=\"reponseA\"\r\n                    onChange={() => handleUpdateResponse(reponse.id)}\r\n                  />\r\n                  <label htmlFor={reponse.id}>{reponse.texte}</label>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OptRepList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}