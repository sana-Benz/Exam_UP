{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanab\\\\OneDrive\\\\Bureau\\\\PROJECT\\\\2023-l2a2\\\\trunk\\\\exam-up\\\\src\\\\assests\\\\components\\\\EditExamInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Form } from \"react-bootstrap\";\nimport ModalComponent from \"./ModalComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EditExamInfo = ({\n  id,\n  id_examen\n}) => {\n  _s();\n  const dateDuJour = new Date();\n  const [title, setTitle] = useState(\"\");\n  const [dateDebut, setDateDebut] = useState(\"\");\n  const [dateFin, setDateFin] = useState(\"\");\n\n  // cherche les détails de l'examen de la base de données\n  const getExamDetails = async id_examen => {\n    try {\n      const response = await fetch(`http://localhost:3001/examen/${id_examen}`);\n      const data = await response.json();\n      // Extract titre, date_debut, et date_fin de l'examen\n      const {\n        titre,\n        date_debut,\n        date_fin\n      } = data;\n\n      // formattage des dates pour s'afficher correctement dans le modal\n      const date_debut_formatted = new Date(date_debut).toISOString().split('T')[0];\n      const date_fin_formatted = new Date(date_fin).toISOString().split('T')[0];\n\n      // initialiser les variables locales avec les valeurs de la bdd\n      setTitle(titre);\n      setDateDebut(date_debut_formatted);\n      setDateFin(date_fin_formatted);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n  useEffect(() => {\n    getExamDetails(id_examen);\n  }, [id_examen]);\n  const [oldtitle, setOldTitle] = useState(title);\n  const [oldDateDebut, setOldDateDebut] = useState(dateDebut);\n  const [oldDateFin, setOldDateFin] = useState(dateFin);\n\n  // fonction appelée quand on clique sur confirmer\n  const updateExamInfo = async id_examen => {\n    try {\n      const body = {\n        titre: title,\n        date_debut: dateDebut,\n        date_fin: dateFin\n      };\n      console.log(body);\n      if (title !== oldtitle) {\n        await fetch(`http://localhost:3001/Mettre_a_jour_titre_examen/${id_examen}`, {\n          method: \"PUT\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(body)\n        });\n      }\n      if (dateDebut !== oldDateDebut || dateFin !== oldDateFin) {\n        if (dateDebut < dateFin && dateFin >= dateDuJour) {\n          // NB j'ai besoin de vérifier aussi que dateFin - dateDebut > durée\n          await fetch(`http://localhost:3001/Mettre_a_jour_date_examen/${id_examen}`, {\n            method: \"PUT\",\n            headers: {\n              \"Content-type\": \"application/json\"\n            },\n            body: JSON.stringify(body)\n          });\n        } else {\n          console.error(\"Date invalide\");\n        }\n      }\n      window.location.href = `/profile-examinateur/${id}`; //retour à l'accueil\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  /*\r\n  //cette partie n'est pas fonctionnelle \r\n  //réinitialise les champs du formulaire avec les valeurs de la bdd si on modifie et on ne confirme pas\r\n  const [showModal, setShowModal] = useState(false);\r\n  const handleShow = () => {\r\n    setOldTitle(title);\r\n    setOldDateDebut(dateDebut);\r\n    setOldDateFin(dateFin);\r\n    setShowModal(true);\r\n  };\r\n  const handleCloseModal = (show) => {\r\n    if (title !== oldtitle || dateDebut !== oldDateDebut || dateFin !== oldDateFin){\r\n    setTitle(oldtitle);\r\n    setDateDebut(oldDateDebut);\r\n    setDateFin(oldDateFin);\r\n    setShowModal(show);\r\n    }\r\n    \r\n  };*/\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ModalComponent, {\n      modalTitle: \"Informations sur l'examen\",\n      buttonTitle: \"Modifier infos examen\",\n      buttonStyle: \"light\",\n      buttonSize: \"lg\",\n      modalBody: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formTitle\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Titre:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            value: title,\n            onChange: e => setTitle(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"dateDebut\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Date de d\\xE9but:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"date\",\n            value: dateDebut,\n            onChange: e => setDateDebut(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"dateFin\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Date de fin:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"date\",\n            value: dateFin,\n            onChange: e => setDateFin(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this),\n      closeText: \"annuler\",\n      confirmText: \"sauvegarder\",\n      handleConfirm: () => updateExamInfo(id_examen)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(EditExamInfo, \"0QUhb53TxYrgOLu0Xh+TPicFw3Y=\");\n_c = EditExamInfo;\nexport default EditExamInfo;\nvar _c;\n$RefreshReg$(_c, \"EditExamInfo\");","map":{"version":3,"names":["React","useState","useEffect","Form","ModalComponent","jsxDEV","_jsxDEV","Fragment","_Fragment","EditExamInfo","id","id_examen","_s","dateDuJour","Date","title","setTitle","dateDebut","setDateDebut","dateFin","setDateFin","getExamDetails","response","fetch","data","json","titre","date_debut","date_fin","date_debut_formatted","toISOString","split","date_fin_formatted","err","console","error","message","oldtitle","setOldTitle","oldDateDebut","setOldDateDebut","oldDateFin","setOldDateFin","updateExamInfo","body","log","method","headers","JSON","stringify","window","location","href","children","modalTitle","buttonTitle","buttonStyle","buttonSize","modalBody","Group","controlId","Label","fileName","_jsxFileName","lineNumber","columnNumber","Control","type","value","onChange","e","target","required","closeText","confirmText","handleConfirm","_c","$RefreshReg$"],"sources":["C:/Users/sanab/OneDrive/Bureau/PROJECT/2023-l2a2/trunk/exam-up/src/assests/components/EditExamInfo.jsx"],"sourcesContent":["import React,{useState, useEffect} from 'react'\r\nimport {Form} from  \"react-bootstrap\";\r\nimport ModalComponent from \"./ModalComponent\";\r\n\r\nconst EditExamInfo = ({ id , id_examen }) => { \r\n    const dateDuJour = new Date();\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n    const [dateDebut, setDateDebut] = useState(\"\");\r\n    const [dateFin, setDateFin] = useState(\"\");\r\n\r\n    \r\n    // cherche les détails de l'examen de la base de données\r\n    const getExamDetails = async (id_examen) => {\r\n      try {\r\n        const response = await fetch(`http://localhost:3001/examen/${id_examen}`);\r\n        const data = await response.json();\r\n        // Extract titre, date_debut, et date_fin de l'examen\r\n        const { titre, date_debut, date_fin } = data;\r\n\r\n        // formattage des dates pour s'afficher correctement dans le modal\r\n        const date_debut_formatted = new Date(date_debut).toISOString().split('T')[0];\r\n        const date_fin_formatted = new Date(date_fin).toISOString().split('T')[0];\r\n\r\n        // initialiser les variables locales avec les valeurs de la bdd\r\n        setTitle(titre);\r\n        setDateDebut(date_debut_formatted);\r\n        setDateFin(date_fin_formatted);\r\n\r\n      } catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      getExamDetails(id_examen); \r\n    }, [id_examen]); \r\n\r\n    const [oldtitle, setOldTitle] = useState(title);\r\n    const [oldDateDebut, setOldDateDebut] = useState(dateDebut);\r\n    const [oldDateFin, setOldDateFin] = useState(dateFin);\r\n\r\n    // fonction appelée quand on clique sur confirmer\r\n    const updateExamInfo = async (id_examen) => {\r\n      \r\n      try {\r\n        const body = { titre: title, date_debut: dateDebut, date_fin: dateFin };\r\n        console.log(body);\r\n        \r\n        if (title !== oldtitle) {\r\n          await fetch(`http://localhost:3001/Mettre_a_jour_titre_examen/${id_examen}`, {\r\n            method: \"PUT\",\r\n            headers: { \"Content-type\": \"application/json\" },\r\n            body: JSON.stringify(body),\r\n          });\r\n        }\r\n        if (dateDebut !== oldDateDebut || dateFin !== oldDateFin) {\r\n            if (dateDebut < dateFin && dateFin >= dateDuJour){\r\n                // NB j'ai besoin de vérifier aussi que dateFin - dateDebut > durée\r\n          await fetch(`http://localhost:3001/Mettre_a_jour_date_examen/${id_examen}`, {\r\n            method: \"PUT\",\r\n            headers: { \"Content-type\": \"application/json\" },\r\n            body: JSON.stringify(body),\r\n          });\r\n            }else{\r\n                console.error(\"Date invalide\");\r\n            }\r\n          \r\n        }\r\n        window.location.href = `/profile-examinateur/${id}`; //retour à l'accueil\r\n      } catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    };\r\n\r\n    /*\r\n    //cette partie n'est pas fonctionnelle \r\n    //réinitialise les champs du formulaire avec les valeurs de la bdd si on modifie et on ne confirme pas\r\n    const [showModal, setShowModal] = useState(false);\r\n    const handleShow = () => {\r\n      setOldTitle(title);\r\n      setOldDateDebut(dateDebut);\r\n      setOldDateFin(dateFin);\r\n      setShowModal(true);\r\n    };\r\n    const handleCloseModal = (show) => {\r\n      if (title !== oldtitle || dateDebut !== oldDateDebut || dateFin !== oldDateFin){\r\n      setTitle(oldtitle);\r\n      setDateDebut(oldDateDebut);\r\n      setDateFin(oldDateFin);\r\n      setShowModal(show);\r\n      }\r\n      \r\n    };*/\r\n\r\n\r\n    return (\r\n      <>\r\n        {/* Modal for updating exam info */}\r\n\r\n        <ModalComponent\r\n          modalTitle=\"Informations sur l'examen\"\r\n          buttonTitle=\"Modifier infos examen\"\r\n          buttonStyle=\"light\"\r\n          buttonSize=\"lg\"\r\n          modalBody={\r\n            <Form>\r\n              <Form.Group controlId=\"formTitle\">\r\n                <Form.Label>Titre:</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  value={title}\r\n                  onChange={(e) => setTitle(e.target.value)}\r\n                  required\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"dateDebut\">\r\n                <Form.Label>Date de début:</Form.Label>\r\n                <Form.Control\r\n                  type=\"date\"\r\n                  value={dateDebut}\r\n                  onChange={(e) => setDateDebut(e.target.value)}\r\n                  required\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"dateFin\">\r\n                <Form.Label>Date de fin:</Form.Label>\r\n                <Form.Control\r\n                  type=\"date\"\r\n                  value={dateFin}\r\n                  onChange={(e) => setDateFin(e.target.value)}\r\n                  required\r\n                />\r\n              </Form.Group>\r\n            </Form>\r\n          }\r\n          closeText=\"annuler\"\r\n          confirmText=\"sauvegarder\"\r\n          handleConfirm={() => updateExamInfo(id_examen)}\r\n          \r\n        \r\n        />\r\n      </>\r\n    );\r\n  }\r\n  \r\n  export default EditExamInfo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}