{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanab\\\\OneDrive\\\\Bureau\\\\PROJECT\\\\2023-l2a2\\\\trunk\\\\exam-up\\\\src\\\\assests\\\\components\\\\QuestionExamen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport OptRepList from \"./OptRepList\";\nimport \"../Pages/style/QuestionExamen.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionExamen = ({\n  id_question\n}) => {\n  _s();\n  const [questionInfo, setQuestionInfo] = useState({});\n  const [reponsesQuestion, setReponsesQuestion] = useState([]); //contiendra les tuples (id_question, id_option) d'une seule question\n\n  // On crée des tuples (id_question, id_option) à partir de idReponsesReçues\n  const handleReponses = idReponses => {\n    if (Array.isArray(idReponses) && idReponses.length > 0) {\n      const nouvellesReponses = idReponses.map(id_option => [id_question, id_option]);\n      setReponsesQuestion(nouvellesReponses);\n      //console.log('voici les réponses à la question',reponsesQuestion);\n    } else {\n      setReponsesQuestion([]);\n    }\n  };\n\n  //fonction qui va chercher le texte d'une question, son type sa durée et son barème à partir de l'id de la question\n  useEffect(() => {\n    const getQuestion = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/question/${id_question}`);\n        const jasonData = await response.json();\n        if (Array.isArray(jasonData) && jasonData.length > 0) {\n          setQuestionInfo(jasonData[0]);\n        } else {\n          console.error(\"No question data returned from the API\");\n        }\n      } catch (err) {\n        console.error(err.message);\n      }\n    };\n    getQuestion();\n  }, [id_question]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Big_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Horizontal_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Question_container\",\n        children: [\"Question : \", questionInfo.texte]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Points_container\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \", questionInfo.nb_points, \" point(s)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(OptRepList, {\n        id_question: id_question,\n        type_question: questionInfo.type,\n        idReponsesCallback: handleReponses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionExamen, \"jPs/Y6S1QQUHVRZnjvbffrax25E=\");\n_c = QuestionExamen;\nexport default QuestionExamen;\nvar _c;\n$RefreshReg$(_c, \"QuestionExamen\");","map":{"version":3,"names":["React","useState","useEffect","OptRepList","jsxDEV","_jsxDEV","QuestionExamen","id_question","_s","questionInfo","setQuestionInfo","reponsesQuestion","setReponsesQuestion","handleReponses","idReponses","Array","isArray","length","nouvellesReponses","map","id_option","getQuestion","response","fetch","jasonData","json","console","error","err","message","className","children","texte","fileName","_jsxFileName","lineNumber","columnNumber","nb_points","type_question","type","idReponsesCallback","_c","$RefreshReg$"],"sources":["C:/Users/sanab/OneDrive/Bureau/PROJECT/2023-l2a2/trunk/exam-up/src/assests/components/QuestionExamen.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport OptRepList from \"./OptRepList\";\r\nimport \"../Pages/style/QuestionExamen.css\";\r\n\r\nconst QuestionExamen = ({ id_question }) => {\r\n  const [questionInfo, setQuestionInfo] = useState({});\r\n  const [reponsesQuestion, setReponsesQuestion] = useState([]); //contiendra les tuples (id_question, id_option) d'une seule question\r\n\r\n  // On crée des tuples (id_question, id_option) à partir de idReponsesReçues\r\n  const handleReponses = (idReponses) => {\r\n    if (Array.isArray(idReponses) && idReponses.length > 0) {\r\n      const nouvellesReponses = idReponses.map(id_option => [id_question, id_option]);\r\n      setReponsesQuestion(nouvellesReponses);\r\n      //console.log('voici les réponses à la question',reponsesQuestion);\r\n    } else {\r\n      setReponsesQuestion([]);\r\n    }\r\n  };\r\n  \r\n \r\n\r\n  //fonction qui va chercher le texte d'une question, son type sa durée et son barème à partir de l'id de la question\r\n  useEffect(() => {\r\n    const getQuestion = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:3001/question/${id_question}`\r\n        );\r\n        const jasonData = await response.json();\r\n        if (Array.isArray(jasonData) && jasonData.length > 0) {\r\n          setQuestionInfo(jasonData[0]);\r\n        } else {\r\n          console.error(\"No question data returned from the API\");\r\n        }\r\n      } catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    };\r\n    getQuestion();\r\n  }, [id_question]);\r\n\r\n  return (\r\n    <div className=\"Big_container\">\r\n      <div className=\"Horizontal_container\">\r\n        <div className=\"Question_container\">\r\n          Question : {questionInfo.texte}\r\n        </div>\r\n        <div className=\"Points_container\">\r\n          <span> {questionInfo.nb_points} point(s)</span>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <div>\r\n        <OptRepList id_question={id_question} type_question={questionInfo.type} idReponsesCallback={handleReponses}/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionExamen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}