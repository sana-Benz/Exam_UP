{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanab\\\\OneDrive\\\\Bureau\\\\PROJECT\\\\2023-l2a2\\\\trunk\\\\exam-up\\\\src\\\\assests\\\\components\\\\OptRepList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../Pages/style/OptRepList.css\";\nimport { useParams } from \"react-router-dom\";\nimport Form from 'react-bootstrap/Form';\n\n//ce composant est utilisé pour l'examen que l'examiné va passer\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OptRepList = ({\n  id_question,\n  type_question,\n  id_examen,\n  etat\n}) => {\n  _s();\n  const {\n    id\n  } = useParams();\n  // liste de réponses possibles pour une question\n  const [ArrayReponses, setArrayReponses] = useState([]);\n  const [soumis, setSoumis] = useState(false);\n\n  // liste des ids des réponses de l'examine\n  const [idReponses, setIdReponses] = useState([]);\n  useEffect(() => {\n    const storedIdReponses = localStorage.getItem(`idReponses_${id_examen}`);\n    if (storedIdReponses) {\n      const parsedIdReponses = JSON.parse(storedIdReponses);\n      if (Array.isArray(parsedIdReponses)) {\n        setIdReponses(parsedIdReponses);\n      } else {\n        console.error(\"Stored idReponses n'est pas un tableau\", parsedIdReponses);\n      }\n    }\n  }, []);\n\n  //fonction qui va chercher la liste des opt de rép de la bdd à partir de l'id de la question\n  useEffect(() => {\n    const getOptRep = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/reponses_possibles/${id_question}`);\n        const jasonData = await response.json();\n        if (Array.isArray(jasonData)) {\n          setArrayReponses(jasonData);\n        } else {\n          console.error(\"Pas de réponse de l'API\");\n        }\n      } catch (err) {\n        console.error(err.message);\n      }\n    };\n    getOptRep();\n  }, [id_question]);\n  const handleExamineAnswers = answerId => {\n    setIdReponses(prevIdReponses => {\n      let newIdReponses = [];\n\n      // Check if the answer is already selected\n      const answerAlreadySelected = prevIdReponses.some(item => item.id_option === answerId);\n      if (type_question === 'QCM') {\n        // If the answer is already selected, remove it from the responses\n        if (answerAlreadySelected) {\n          newIdReponses = prevIdReponses.filter(item => item.id_option !== answerId);\n        } else {\n          // Otherwise, add the answer to the responses\n          newIdReponses = [...prevIdReponses, {\n            id_question,\n            id_option: answerId\n          }];\n        }\n      } else if (type_question === 'QCU') {\n        // Check if any QCU answer is already selected for the same question\n        const existingQcuResponse = prevIdReponses.find(item => item.id_question === id_question && item.id_option !== answerId);\n        if (existingQcuResponse) {\n          // If a different QCU answer is selected, replace it with the new answer\n          newIdReponses = prevIdReponses.map(item => item.id_question === id_question ? {\n            id_question,\n            id_option: answerId\n          } : item);\n        } else if (!answerAlreadySelected) {\n          // If no QCU answer is selected and the current answer is not selected, add the answer\n          newIdReponses = [...prevIdReponses, {\n            id_question,\n            id_option: answerId\n          }];\n        }\n      }\n\n      // Update the local storage with the new responses\n      localStorage.setItem(`idReponses_${id_examen}`, JSON.stringify(newIdReponses));\n      console.log('voici les id des réponses cochées ', newIdReponses);\n      return newIdReponses;\n    });\n  };\n  const handleSubmit = async e => {\n    console.log(\"voici les réponses à envoyer\", idReponses);\n    if (e) {\n      e.preventDefault();\n    }\n    if (idReponses.length > 0) {\n      try {\n        console.log(\"je suis avant le post\");\n        const response = await fetch(`http://localhost:3001/Envoyer_reponses_examine/${id}/${id_examen}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            idReponses\n          })\n        });\n        await response.json();\n        setSoumis(true);\n        console.log(\"réponses envoyées à la base de données!\");\n        localStorage.removeItem(`idReponses_${id_examen}`);\n        window.location.href = `/Profile_examine/${id}`;\n      } catch (error) {\n        console.error(\"Erreur:\", error);\n      }\n    } else {\n      console.log(\"Aucune réponse à soumettre\");\n    }\n  };\n  useEffect(() => {\n    if (etat && !soumis) {\n      handleSubmit();\n    }\n  }, [etat, soumis]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Big_Container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"consigne\",\n      children: \"Veuillez choisir la ou les r\\xE9ponse(s) correcte(s) :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Smaller_Container\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: ArrayReponses.map(reponse => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"response_container\",\n          children: type_question === 'QCM' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: reponse.id,\n              value: reponse.texte,\n              className: \"reponse\",\n              onChange: () => handleExamineAnswers(reponse.id),\n              checked: idReponses.some(item => item.id_option === reponse.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: reponse.id,\n              children: reponse.texte\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: reponse.id,\n              name: \"reponse\",\n              value: reponse.texte,\n              className: \"reponseA\",\n              onChange: () => handleExamineAnswers(reponse.id),\n              checked: idReponses.some(item => item.id_option === reponse.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: reponse.id,\n              children: reponse.texte\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }, this)\n        }, reponse.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(OptRepList, \"0yD3y/thx8jA9vwELl0r3Td6PJw=\", false, function () {\n  return [useParams];\n});\n_c = OptRepList;\nexport default OptRepList;\nvar _c;\n$RefreshReg$(_c, \"OptRepList\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Form","jsxDEV","_jsxDEV","OptRepList","id_question","type_question","id_examen","etat","_s","id","ArrayReponses","setArrayReponses","soumis","setSoumis","idReponses","setIdReponses","storedIdReponses","localStorage","getItem","parsedIdReponses","JSON","parse","Array","isArray","console","error","getOptRep","response","fetch","jasonData","json","err","message","handleExamineAnswers","answerId","prevIdReponses","newIdReponses","answerAlreadySelected","some","item","id_option","filter","existingQcuResponse","find","map","setItem","stringify","log","handleSubmit","e","preventDefault","length","method","headers","body","removeItem","window","location","href","className","children","fileName","_jsxFileName","lineNumber","columnNumber","reponse","type","value","texte","onChange","checked","htmlFor","name","_c","$RefreshReg$"],"sources":["C:/Users/sanab/OneDrive/Bureau/PROJECT/2023-l2a2/trunk/exam-up/src/assests/components/OptRepList.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../Pages/style/OptRepList.css\";\r\nimport { useParams} from \"react-router-dom\";\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n//ce composant est utilisé pour l'examen que l'examiné va passer\r\nconst OptRepList = ({id_question , type_question ,id_examen ,etat}) => {\r\n  const { id } = useParams();\r\n  // liste de réponses possibles pour une question\r\n  const [ArrayReponses, setArrayReponses] = useState([]);\r\n  const [soumis, setSoumis]= useState(false);\r\n\r\n\r\n  // liste des ids des réponses de l'examine\r\n  const [idReponses, setIdReponses] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const storedIdReponses = localStorage.getItem(`idReponses_${id_examen}`);\r\n    if (storedIdReponses) {\r\n        const parsedIdReponses = JSON.parse(storedIdReponses);\r\n        if (Array.isArray(parsedIdReponses)) {\r\n            setIdReponses(parsedIdReponses);\r\n        } else {\r\n            console.error(\"Stored idReponses n'est pas un tableau\", parsedIdReponses);\r\n        }\r\n    }\r\n}, []);\r\n  \r\n  //fonction qui va chercher la liste des opt de rép de la bdd à partir de l'id de la question\r\n  useEffect(() => {\r\n    const getOptRep = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:3001/reponses_possibles/${id_question}`);\r\n        const jasonData = await response.json(); \r\n        if (Array.isArray(jasonData)) {\r\n          setArrayReponses(jasonData);\r\n        } else {\r\n          console.error(\"Pas de réponse de l'API\");\r\n        }\r\n      } catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    };\r\n  \r\n    getOptRep(); \r\n  }, [id_question]);\r\n\r\n  \r\n  const handleExamineAnswers = (answerId) => {\r\n    setIdReponses((prevIdReponses) => {\r\n      let newIdReponses = [];\r\n  \r\n      // Check if the answer is already selected\r\n      const answerAlreadySelected = prevIdReponses.some(item => item.id_option === answerId);\r\n  \r\n      if (type_question === 'QCM') {\r\n        // If the answer is already selected, remove it from the responses\r\n        if (answerAlreadySelected) {\r\n          newIdReponses = prevIdReponses.filter(item => item.id_option !== answerId);\r\n        } else {\r\n          // Otherwise, add the answer to the responses\r\n          newIdReponses = [...prevIdReponses, { id_question, id_option: answerId }];\r\n        }\r\n      } else if (type_question === 'QCU') {\r\n        // Check if any QCU answer is already selected for the same question\r\n        const existingQcuResponse = prevIdReponses.find(item => item.id_question === id_question && item.id_option !== answerId);\r\n  \r\n        if (existingQcuResponse) {\r\n          // If a different QCU answer is selected, replace it with the new answer\r\n          newIdReponses = prevIdReponses.map(item =>\r\n            item.id_question === id_question ? { id_question, id_option: answerId } : item\r\n          );\r\n        } else if (!answerAlreadySelected) {\r\n          // If no QCU answer is selected and the current answer is not selected, add the answer\r\n          newIdReponses = [...prevIdReponses, { id_question, id_option: answerId }];\r\n        }\r\n      }\r\n  \r\n      // Update the local storage with the new responses\r\n      localStorage.setItem(`idReponses_${id_examen}`, JSON.stringify(newIdReponses));\r\n      console.log('voici les id des réponses cochées ', newIdReponses);\r\n  \r\n      return newIdReponses;\r\n    });\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n    \r\n  const handleSubmit = async (e) => {\r\n      console.log(\"voici les réponses à envoyer\", idReponses);\r\n      if (e) {\r\n        e.preventDefault();\r\n      }\r\n\r\n      if (idReponses.length > 0) {\r\n        try {\r\n          console.log(\"je suis avant le post\");\r\n          const response = await fetch(\r\n            `http://localhost:3001/Envoyer_reponses_examine/${id}/${id_examen}`,\r\n            {\r\n              method: \"POST\",\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n              body: JSON.stringify({ idReponses }),\r\n            }\r\n          );\r\n          await response.json();\r\n          setSoumis(true);\r\n          console.log(\"réponses envoyées à la base de données!\");\r\n          localStorage.removeItem(`idReponses_${id_examen}`);\r\n          window.location.href = `/Profile_examine/${id}`;\r\n        } catch (error) {\r\n          console.error(\"Erreur:\", error);\r\n        }\r\n      } else {\r\n        console.log(\"Aucune réponse à soumettre\");\r\n      }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (etat && !soumis ) {\r\n      handleSubmit();\r\n    }\r\n  }, [etat, soumis]);\r\n  \r\n\r\n  return (\r\n    <div className=\"Big_Container\">\r\n      <p className=\"consigne\">Veuillez choisir la ou les réponse(s) correcte(s) :</p>\r\n      <div className=\"Smaller_Container\">\r\n        <Form>\r\n          {ArrayReponses.map((reponse) => (\r\n            <div key={reponse.id} className=\"response_container\">\r\n              {type_question === 'QCM' ? (\r\n                <div>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id={reponse.id}\r\n                    value={reponse.texte}\r\n                    className=\"reponse\"\r\n                    onChange={() => handleExamineAnswers(reponse.id)}\r\n                    checked={idReponses.some(item => item.id_option === reponse.id)}\r\n                  />\r\n                  <label htmlFor={reponse.id}>{reponse.texte}</label>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={reponse.id}\r\n                    name=\"reponse\"\r\n                    value={reponse.texte}\r\n                    className=\"reponseA\"\r\n                    onChange={() => handleExamineAnswers(reponse.id)}\r\n                    checked={idReponses.some(item => item.id_option === reponse.id)}\r\n                  />\r\n                  <label htmlFor={reponse.id}>{reponse.texte}</label>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default OptRepList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}