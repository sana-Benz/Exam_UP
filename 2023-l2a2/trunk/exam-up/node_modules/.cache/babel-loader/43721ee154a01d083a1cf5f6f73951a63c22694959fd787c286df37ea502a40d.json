{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanab\\\\OneDrive\\\\Bureau\\\\PROJECT\\\\2023-l2a2\\\\trunk\\\\exam-up\\\\src\\\\assests\\\\components\\\\Examen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport QuestionExamen from './QuestionExamen';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Examen = ({\n  id_examen\n}) => {\n  _s();\n  const [arrayQuestionId, setArrayQuestionId] = useState([]);\n  const [reponsesQuestions, setReponsesQuestions] = useState([]); //contiendra les tuples (id_question, id_option) de toutes les questions\n\n  const handleQuestion = reponsesQuestion => {\n    setReponsesQuestions([...reponsesQuestion]);\n  };\n\n  //chercher la liste des ids des questions de l'examen à partir de l'id de l'examen\n  useEffect(() => {\n    const getQuestionList = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/questions_examen/${id_examen}`);\n        const jasonData = await response.json();\n        setArrayQuestionId(jasonData);\n      } catch (err) {\n        console.error(err.message);\n      }\n    };\n    getQuestionList();\n  }, [id_examen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"flex-end\"\n    },\n    children: arrayQuestionId.map((questionId, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"10px\",\n        marginRight: \"10px\"\n      },\n      children: [console.log(\"Question ID:\", questionId), /*#__PURE__*/_jsxDEV(QuestionExamen, {\n        id_question: questionId.id,\n        reponsesQuestionCallback: handleQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(Examen, \"rEU5OJP29l+48ZRPvuAf/HMeH4U=\");\n_c = Examen;\nexport default Examen;\nvar _c;\n$RefreshReg$(_c, \"Examen\");","map":{"version":3,"names":["React","useState","useEffect","QuestionExamen","useLocation","jsxDEV","_jsxDEV","Examen","id_examen","_s","arrayQuestionId","setArrayQuestionId","reponsesQuestions","setReponsesQuestions","handleQuestion","reponsesQuestion","getQuestionList","response","fetch","jasonData","json","err","console","error","message","style","display","flexDirection","alignItems","children","map","questionId","index","marginTop","marginRight","log","id_question","id","reponsesQuestionCallback","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sanab/OneDrive/Bureau/PROJECT/2023-l2a2/trunk/exam-up/src/assests/components/Examen.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport QuestionExamen from './QuestionExamen'\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst Examen = ({id_examen}) => {\r\n  const [arrayQuestionId, setArrayQuestionId] = useState([]);\r\n  const [reponsesQuestions, setReponsesQuestions] = useState([]); //contiendra les tuples (id_question, id_option) de toutes les questions\r\n\r\n\r\n  const handleQuestion =(reponsesQuestion) => {\r\n    setReponsesQuestions([...reponsesQuestion]);\r\n  }\r\n\r\n\r\n\r\n\r\n  //chercher la liste des ids des questions de l'examen à partir de l'id de l'examen\r\n  useEffect(() => {\r\n    const getQuestionList = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:3001/questions_examen/${id_examen}`\r\n        );\r\n        const jasonData = await response.json();\r\n        setArrayQuestionId(jasonData);\r\n      } catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    };\r\n    getQuestionList();\r\n  }, [id_examen]);\r\n\r\n\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"flex-end\" }}>\r\n    {arrayQuestionId.map((questionId , index) => (\r\n      <div key={index} style={{ marginTop: \"10px\", marginRight: \"10px\" }}>\r\n        \r\n        {console.log(\"Question ID:\", questionId)}\r\n        <QuestionExamen id_question={questionId.id} reponsesQuestionCallback={handleQuestion}/>\r\n      </div>\r\n    ))}\r\n  </div>\r\n \r\n  )\r\n}\r\n\r\nexport default Examen\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,MAAM,GAAGA,CAAC;EAACC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACW,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAGhE,MAAMa,cAAc,GAAGC,gBAAgB,IAAK;IAC1CF,oBAAoB,CAAC,CAAC,GAAGE,gBAAgB,CAAC,CAAC;EAC7C,CAAC;;EAKD;EACAb,SAAS,CAAC,MAAM;IACd,MAAMc,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,0CAAyCV,SAAU,EACtD,CAAC;QACD,MAAMW,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACvCT,kBAAkB,CAACQ,SAAS,CAAC;MAC/B,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAACG,OAAO,CAAC;MAC5B;IACF,CAAC;IACDR,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACR,SAAS,CAAC,CAAC;EAIf,oBACEF,OAAA;IAAKmB,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,aAAa,EAAE,QAAQ;MAAEC,UAAU,EAAE;IAAW,CAAE;IAAAC,QAAA,EAChFnB,eAAe,CAACoB,GAAG,CAAC,CAACC,UAAU,EAAGC,KAAK,kBACtC1B,OAAA;MAAiBmB,KAAK,EAAE;QAAEQ,SAAS,EAAE,MAAM;QAAEC,WAAW,EAAE;MAAO,CAAE;MAAAL,QAAA,GAEhEP,OAAO,CAACa,GAAG,CAAC,cAAc,EAAEJ,UAAU,CAAC,eACxCzB,OAAA,CAACH,cAAc;QAACiC,WAAW,EAAEL,UAAU,CAACM,EAAG;QAACC,wBAAwB,EAAExB;MAAe;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA,GAH/EV,KAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIV,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAGR,CAAC;AAAAjC,EAAA,CA1CKF,MAAM;AAAAoC,EAAA,GAANpC,MAAM;AA4CZ,eAAeA,MAAM;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}