{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sanab\\\\OneDrive\\\\Bureau\\\\PROJECT\\\\2023-l2a2\\\\trunk\\\\exam-up\\\\src\\\\assests\\\\components\\\\OptRepList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../Pages/style/OptRepList.css\";\nimport Form from 'react-bootstrap/Form';\n\n//ce composant est utilisé pour l'examen que l'examiné va passer\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OptRepList = ({\n  id_question,\n  type_question,\n  idReponsesCallback\n}) => {\n  _s();\n  // liste de réponses possibles pour une question\n  const [ArrayReponses, setArrayReponses] = useState([]);\n\n  // liste des ids des réponses de l'examine\n  const [idReponses, setIdReponses] = useState([]);\n\n  /*useEffect(() => {\r\n    const storedIdReponses = localStorage.getItem('idReponses');\r\n    if (storedIdReponses) {\r\n      setIdReponses(JSON.parse(storedIdReponses));\r\n    }\r\n  }, []);*/\n\n  //fonction qui va chercher la liste des opt de rép de la bdd à partir de l'id de la question\n  useEffect(() => {\n    const getOptRep = async () => {\n      try {\n        const response = await fetch(`http://localhost:3001/reponses_possibles/${id_question}`);\n        const jasonData = await response.json();\n        if (Array.isArray(jasonData)) {\n          setArrayReponses(jasonData);\n        } else {\n          console.error(\"Pas de réponse de l'API\");\n        }\n      } catch (err) {\n        console.error(err.message);\n      }\n    };\n    getOptRep();\n  }, [id_question]);\n  const handleExamineAnswers = (answerId, id_question) => {\n    setIdReponses(prevIdReponses => {\n      const newIdReponses = type_question === 'QCM' ? prevIdReponses.includes(answerId) ? prevIdReponses.filter(id => id !== answerId) : [...prevIdReponses, answerId] : [answerId];\n      const selectedAnswer = {\n        id_question,\n        id_option: answerId\n      };\n      const storedAnswers = JSON.parse(localStorage.getItem('idReponses')) || [];\n      const updatedStoredAnswers = [...storedAnswers.filter(item => item.id_question !== id_question), selectedAnswer];\n      localStorage.setItem('idReponses', JSON.stringify(updatedStoredAnswers));\n      idReponsesCallback(newIdReponses);\n      console.log('voici l id des reponses cochés ', newIdReponses);\n      return newIdReponses;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Big_Container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"consigne\",\n      children: \"Veuillez choisir la ou les r\\xE9ponse(s) correcte(s) :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Smaller_Container\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: ArrayReponses.map(reponse => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"response_container\",\n          children: type_question === 'QCM' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: reponse.id,\n              value: reponse.texte,\n              className: \"reponse\",\n              onChange: () => handleExamineAnswers(reponse.id),\n              checked: idReponses.includes(reponse.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: reponse.id,\n              children: reponse.texte\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: reponse.id,\n              name: \"reponse\",\n              value: reponse.texte,\n              className: \"reponseA\",\n              onChange: () => handleExamineAnswers(reponse.id),\n              checked: idReponses.some(item => item.id_option === reponse.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: reponse.id,\n              children: reponse.texte\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this)\n        }, reponse.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(OptRepList, \"cZiwq77fR6dK2GBuQoyLL0qo99g=\");\n_c = OptRepList;\nexport default OptRepList;\nvar _c;\n$RefreshReg$(_c, \"OptRepList\");","map":{"version":3,"names":["React","useState","useEffect","Form","jsxDEV","_jsxDEV","OptRepList","id_question","type_question","idReponsesCallback","_s","ArrayReponses","setArrayReponses","idReponses","setIdReponses","getOptRep","response","fetch","jasonData","json","Array","isArray","console","error","err","message","handleExamineAnswers","answerId","prevIdReponses","newIdReponses","includes","filter","id","selectedAnswer","id_option","storedAnswers","JSON","parse","localStorage","getItem","updatedStoredAnswers","item","setItem","stringify","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","reponse","type","value","texte","onChange","checked","htmlFor","name","some","_c","$RefreshReg$"],"sources":["C:/Users/sanab/OneDrive/Bureau/PROJECT/2023-l2a2/trunk/exam-up/src/assests/components/OptRepList.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../Pages/style/OptRepList.css\";\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n//ce composant est utilisé pour l'examen que l'examiné va passer\r\nconst OptRepList = ({id_question , type_question , idReponsesCallback}) => {\r\n  // liste de réponses possibles pour une question\r\n  const [ArrayReponses, setArrayReponses] = useState([]);\r\n\r\n  // liste des ids des réponses de l'examine\r\n  const [idReponses, setIdReponses] = useState([]);\r\n\r\n  /*useEffect(() => {\r\n    const storedIdReponses = localStorage.getItem('idReponses');\r\n    if (storedIdReponses) {\r\n      setIdReponses(JSON.parse(storedIdReponses));\r\n    }\r\n  }, []);*/\r\n  \r\n  //fonction qui va chercher la liste des opt de rép de la bdd à partir de l'id de la question\r\n  useEffect(() => {\r\n    const getOptRep = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:3001/reponses_possibles/${id_question}`);\r\n        const jasonData = await response.json(); \r\n        if (Array.isArray(jasonData)) {\r\n          setArrayReponses(jasonData);\r\n        } else {\r\n          console.error(\"Pas de réponse de l'API\");\r\n        }\r\n      } catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    };\r\n  \r\n    getOptRep(); \r\n  }, [id_question]);\r\n\r\n  const handleExamineAnswers = (answerId, id_question) => {\r\n    setIdReponses(prevIdReponses => {\r\n      const newIdReponses = type_question === 'QCM' ?\r\n        (prevIdReponses.includes(answerId) ? prevIdReponses.filter(id => id !== answerId) : [...prevIdReponses, answerId]) :\r\n        [answerId];\r\n  \r\n    const selectedAnswer = { id_question, id_option: answerId };\r\n    const storedAnswers = JSON.parse(localStorage.getItem('idReponses')) || [];\r\n    const updatedStoredAnswers = [...storedAnswers.filter(item => item.id_question !== id_question), selectedAnswer];\r\n    localStorage.setItem('idReponses', JSON.stringify(updatedStoredAnswers));\r\n  \r\n      idReponsesCallback(newIdReponses); \r\n      console.log('voici l id des reponses cochés ', newIdReponses); \r\n  \r\n      return newIdReponses; \r\n    });\r\n  };\r\n    \r\n\r\n  return (\r\n    <div className=\"Big_Container\">\r\n      <p className=\"consigne\">Veuillez choisir la ou les réponse(s) correcte(s) :</p>\r\n      <div className=\"Smaller_Container\">\r\n        <Form>\r\n          {ArrayReponses.map((reponse) => (\r\n            <div key={reponse.id} className=\"response_container\">\r\n              {type_question === 'QCM' ? (\r\n                <div>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    id={reponse.id}\r\n                    value={reponse.texte}\r\n                    className=\"reponse\"\r\n                    onChange={() => handleExamineAnswers(reponse.id)}\r\n                    checked={idReponses.includes(reponse.id)}\r\n                  />\r\n                  <label htmlFor={reponse.id}>{reponse.texte}</label>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={reponse.id}\r\n                    name=\"reponse\"\r\n                    value={reponse.texte}\r\n                    className=\"reponseA\"\r\n                    onChange={() => handleExamineAnswers(reponse.id)}\r\n                    checked={idReponses.some(item => item.id_option === reponse.id)}\r\n                  />\r\n                  <label htmlFor={reponse.id}>{reponse.texte}</label>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OptRepList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}