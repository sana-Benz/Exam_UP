import React, { useState, useEffect, useRef } from "react";
import HeaderExamine from "../components/HeaderExamine";
import { Container, Button, Spinner} from "react-bootstrap";
import Examen from "../components/Examen";
import "./style/ExamPage.css";
import { useParams } from "react-router-dom";
import NavbarProfil from "../components/NavbarProfil";
import ModalComponent from "../components/ModalComponent";

const ExamPage = () => {
  const { id, id_examen } = useParams();
  const [etat, setEtat] = useState(false);
  const [timer, setTimer] = useState(null);
  const intervalRef = useRef(null);
  const [nom, setNom] = useState("");
  const [prenom, setPrenom] = useState("");

  //chercher le temps enregistré en localstorage
  useEffect(() => {
    const storedTimer = localStorage.getItem(`timer_examen_${id}_${id_examen}`);
    if (storedTimer) {
      setTimer(parseInt(storedTimer));
    } else {
      getDuree();
    }
  }, [id, id_examen]);

  //update le temps du localStorage
  useEffect(() => {
    if (timer !== null) {
      localStorage.setItem(`timer_examen_${id}_${id_examen}`, timer.toString());
    }
  }, [timer, id, id_examen]);

  //cherche le temps total de l'examen
  const getDuree = async () => {
    try {
      const response = await fetch(
        `http://localhost:3001/duree_examen/${id}/${id_examen}`
      );
      if (!response.ok) {
        console.log("erreur de chargement de durée");
        return;
      }
      const jasonData = await response.json();
      setTimer(parseInt(jasonData.total_duration.minutes) * 60);
    } catch (err) {
      console.error(err.message);
    }
  };

  //get donnees utilisateur
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const response = await fetch(`http://localhost:3001/utilisateur/${id}`);
        if (!response.ok) {
          throw new Error("Erreur de réseau ou réponse non valide");
        }
        const data = await response.json();
        setNom(data.nom);
        setPrenom(data.prenom);
      } catch (error) {
        console.error(
          "Erreur lors de la récupération des données de l'utilisateur",
          error
        );
      }
    };
    if (id) {
      fetchUserData();
    }
  }, [id]);

  const urlLogo = `/Profile_examine/${id}`;

  const containertable = {
    width: "100%",
  };

  //mise à jour du timer
  useEffect(() => {
    if (timer === 0) {
      soumettre();
    }
    if (timer !== null && timer > 0) {
      const countdown = () => {
        setTimer((prevTimer) => {
          if (prevTimer > 0) {
            return prevTimer - 1;
          } else {
            clearInterval(intervalRef.current);
            return 0;
          }
        });
      };
      intervalRef.current = setInterval(countdown, 1000);
    }
    return () => clearInterval(intervalRef.current);
  }, [timer]);

  //formattage du temps
  const formatTime = (seconds) => {
    const heures = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secondesRestantes = seconds % 60;
    return `${heures}:${String(minutes).padStart(2, "0")}:${String(
      secondesRestantes
    ).padStart(2, "0")}`;
  };

  //trigger la soumission des réponses
  const soumettre = () => {
    setEtat(true);
    localStorage.removeItem(`timer_examen_${id}_${id_examen}`);
  };

  //si le timer n'est pas encore initialisé avec getDuree
  if (timer === null) {
    return (
      <div
        style={{
          backgroundColor: "rgba(142, 202, 230, 0.34)",
          minHeight: "100vh",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
          flexDirection: "column",
          color: "white",
          fontWeight: "bold",
        }}
      >
        <Spinner animation="border" variant="warning" />
        <div style={{ marginTop: "20px" }}>Chargement de l'examen...</div>
      </div>
    );
  }
  return (
    <div>
      <NavbarProfil nom={nom} prenom={prenom} homePageURL={urlLogo} />

      <div
        style={{
          backgroundColor: "rgba(142, 202, 230, 0.34)",
          minHeight: "100vh",
          padding: "20px 0",
        }}
      >
        <div className="sticky_container">
          <div className="timer">{formatTime(timer)}</div> <br />
          <ModalComponent
            modalTitle="Soumission de l'examen"
            buttonTitle="Finir et soumettre"
            buttonStyle="danger"
            closeText="Annuler"
            confirmText="confirmer"
            handleConfirm={soumettre}
            modalBody={"êtes-vous sûr de vouloir soumettre l'examen ?"}
          />
        </div>

        <Container fluid className="contentContainer">
          <div className="Questions">
            <Examen id_examen={id_examen} etat={etat} />
          </div>
        </Container>
      </div>
    </div>
  );
};

export default ExamPage;
